<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rainbowuniv.academicmenagmentbe.application.ApplicationMapper">

    <!-- DB 입력 -->
    <insert id="insertApplication">
        INSERT INTO application(user_id, schedule_id, reason, status, created_at)
        VALUES (#{userId}, #{scheduleId}, #{reason}, '처리중', NOW())
    </insert>

    <!-- 다음 학기 학기ID 조회 -->
    <select id="selectNextSemesterId">
        SELECT s2.semester_id
        FROM semester s1
        JOIN semester s2
        ON (s1.semester = '1' AND s2.year = s1.year     AND s2.semester = '2')
        OR (s1.semester = '2' AND s2.year = s1.year + 1 AND s2.semester = '1')
        WHERE s1.semester_id = #{currentSemesterId}
        LIMIT 1
    </select>

    <!-- 해당 학기 휴/복학 스케줄 검색
         schedule_type 예: '휴학신청' | '복학신청' -->
    <select id="selectScheduleForSemesterAndType">
        SELECT
        schedule_id     AS scheduleId,
        start_datetime  AS startDate,
        end_datetime    AS endDate
        FROM schedule
        WHERE semester_id = #{semesterId}
        AND schedule_type = #{scheduleType}
        ORDER BY start_datetime DESC
        LIMIT 1
    </select>

    <!-- 접수 기간 안에만 신청 받기 -->
    <select id="isScheduleOpenNow">
        SELECT CASE WHEN NOW() BETWEEN start_datetime AND end_datetime THEN 1 ELSE 0 END
        FROM schedule
        WHERE schedule_id = #{scheduleId}
    </select>

    <!-- 내 신청 목록 -->
    <select id="selectMyApplications">
        SELECT
        a.app_id         AS appId,
        a.status         AS status,
        a.reason         AS reason,
        a.created_at     AS submittedAt,
        s.schedule_type  AS scheduleType,
        s.start_datetime AS scheduleStart,
        s.end_datetime   AS scheduleEnd,
        sem.year         AS year,
        sem.semester     AS semester,
        d.dept_name      AS deptName         <!-- ✅ 학과명 추가 -->
        FROM application a
        JOIN schedule   s   ON s.schedule_id = a.schedule_id
        JOIN semester   sem ON sem.semester_id = s.semester_id
        LEFT JOIN student    st ON st.user_id = a.user_id
        LEFT JOIN department d  ON d.dept_id = st.dept_id
        WHERE a.user_id = #{userId}
        <if test="status != null and status != ''">
            AND a.status = #{status}
        </if>
        ORDER BY a.created_at DESC
    </select>

</mapper>
